<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DamonFish Blog</title>
    <description>这里是 DamonFish的Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 24 Jul 2024 10:27:46 +0800</pubDate>
    <lastBuildDate>Wed, 24 Jul 2024 10:27:46 +0800</lastBuildDate>
    <generator>Jekyll v4.3.3</generator>
    
      <item>
        <title>iOS 读写锁</title>
        <description>&lt;h2 id=&quot;概念&quot;&gt;概念&lt;/h2&gt;

&lt;p&gt;读写锁用于解决读写问题。读操作可并发重入，写操作是互斥的。
这意味着多个线程可以同时读数据，但写数据时需要获得一个独占的锁。&lt;/p&gt;

&lt;p&gt;能同时多个线程读，
只能同时一个线程写（修改）.
不能同时一个线程写，一个线程读。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;多读单写&lt;/strong&gt;
读写锁常见的用法是控制线程对内存中的某种数据结构的访问.&lt;/p&gt;

&lt;h2 id=&quot;实现方式&quot;&gt;实现方式&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;pthread_rwlock， 专门的读写锁&lt;/li&gt;
  &lt;li&gt;dispatch_barrier_async&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们只讲第二种方式，dispatch_barrier_async.&lt;/p&gt;

&lt;h2 id=&quot;whats-barrier&quot;&gt;What’s Barrier&lt;/h2&gt;

&lt;p&gt;GCD的并发队列有一个Barrier Block的概念，关于Barrier Block，Apple给出的解释如下:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Will not run until all blocks submitted earlier have completed
Blocks submitted later will not run until barrier block has completed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单讲就是， 通过dispatch_barrier_async向队列提交的任务A，A会等在它之前提交的任务完成后执行，
A执行中， 所有在它之后提交的任务都得等A完成后执行。
dispatch_barrier_async提交的任务像一个栅栏任务， 拦住了后续提交的任务。&lt;/p&gt;

&lt;p&gt;仔细想想， dispatch_barrier_async的特性，决定了它能实现读写锁。&lt;/p&gt;

&lt;p&gt;在 AFN 中，header的读写锁实现。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// 并发队列
self.requestHeaderModificationQueue = dispatch_queue_create(&quot;requestHeaderModificationQueue&quot;, DISPATCH_QUEUE_CONCURRENT);

// 同步方法，可以并发获取字典
- (NSDictionary *)HTTPRequestHeaders {
    NSDictionary__ block *value；
    dispatch_sync(self.requestHeaderModificationQueue， ^{
    value = 【NSDictionary dictionaryWithDictionary:self.mutableHTTPRequestHeaders];
    });
    return value；
}
// 异步方法，使用dispatch_barrier_async/dispatch_barrier_sync可以保证一次只有一个线程
- (void)setValue:(NSString *)value forHTTPHeaderField:(NSString *)field
    dispatch_barrier_async(self.requestHeaderModificationQueue， ^{
    [self . mutableHTTPRequestHeaders setValue:value forKey:field];
    });
}
// 同步方法，并发获取字典里的值
- (NSString *)valueForHTTPHeaderField:(NSString *)field {
    NSString __block *value；
    dispatch_sync(self.requestHeaderModificationQueue，^{
    value = [self.mutableHTTPRequestHeaders valueForKey:field];
    });
    return value；
}

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;whats-new-锁不住&quot;&gt;What’s New? 锁不住！&lt;/h2&gt;

&lt;p&gt;一般的读写锁就讲的上面了，更多细节请自行Google.
但是实际使用上有些额外的值得考虑。&lt;/p&gt;

&lt;p&gt;如果想锁住只是标量或普通的值类型， String, Int, Double, Bool, [String], [String: Int]，没有问题。&lt;/p&gt;

&lt;p&gt;但是很多情况，想锁住的是Array或Dictionary这样的容器就得小心了。
&lt;strong&gt;锁得了容器本身的读写，无法锁住容器内元素的读写&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;例如dataSource是一个Person类实例的数组&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  queue.async { [weak self] in
      guard let self else { return }
      // read
      self.firstPerson = dataSource.first
  }
  
  // 这是很容易就操作的
  // 在其他的线程修改 DataSource数组中第一个person
  self.firstPerson.name = nil
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstPerson.name&lt;/code&gt; 在其他线程修改，&lt;br /&gt;
那么在读写锁所在线程：
读firstPerson，person的内容可能已经被修改。
写firstPerson，会产生线程冲突！&lt;/p&gt;

&lt;p&gt;除了线程冲突错误，可能还会遇到一些访问以及被释放对象的错误, 因为被其他线程释放了。&lt;/p&gt;

&lt;h2 id=&quot;解决方法&quot;&gt;解决方法&lt;/h2&gt;

&lt;p&gt;将容器本身修改，以及容器内元素的修改都放到写操作里。
先实现一个读写锁控制读写的属性封装器，下面的代码是修改GRDB的实现：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadWriteBox.swift&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;import Dispatch

/// A ReadWriteBox grants multiple readers and single-writer guarantees on a
/// value. It is backed by a concurrent DispatchQueue.
@propertyWrapper
final class ReadWriteBox&amp;lt;T&amp;gt; {
    private var _wrappedValue: T
    private var queue: DispatchQueue
    
    var wrappedValue: T {
        get { read { $0 } }
        set { update { $0 = newValue } }
    }
    
    var projectedValue: MJReadWriteBox&amp;lt;T&amp;gt; { self }
    
    init(wrappedValue: T) {
        _wrappedValue = wrappedValue
        queue = DispatchQueue(label: &quot;Secent.ReadWriteBox&quot;, attributes: [.concurrent])
    }
    
    func read&amp;lt;U&amp;gt;(_ block: (T) throws -&amp;gt; U) rethrows -&amp;gt; U {
        try queue.sync {
            try block(_wrappedValue)
        }
    }
    
    func update&amp;lt;U&amp;gt;(_ block: @escaping (inout T) -&amp;gt; U) {
        queue.async(flags: [.barrier]) { [weak self] in
            guard let self else { return }
            _ = block(&amp;amp;self._wrappedValue)
        }
    }
    
    /// Sync update with a return value, attention deadlock!
    func syncUpdate&amp;lt;U&amp;gt;(_ block: (inout T) throws -&amp;gt; U) rethrows -&amp;gt; U {
        try queue.sync(flags: [.barrier]) {
            try block(&amp;amp;_wrappedValue)
        }
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;写相关的操作如下。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;@ReadWriteBox var dataSource = [Person]()

  // 写操作
  $dataSource.update { [weak self] allPersons in
      guard let self else { return }
      let firstPerson = allPersons.first
      firtstPerson.name = nil
  }

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;线程死锁&quot;&gt;线程死锁&lt;/h3&gt;

&lt;p&gt;其实这种死锁并不常见，还是有必要说明一下.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let queue = DispatchQueue(label: &quot;Secent.ReadWriteBox&quot;, attributes: [.concurrent])

for i in 0..&amp;lt;100 {
    print(&quot;test begin&quot;, i)
    DispatchQueue.global().async {
        self.queue.sync {
            print(&quot;read&quot;)
        }
        
        self.queue.async(flags: .barrier) {
            print(&quot;write&quot;)
        }
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;执行上面的代码， App不会crash，但是queue所在的线程已经死锁。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The problem is that you’re scheduling 100 tasks to be executed concurrently. This will exceed the virtual thread limit (usually 64) –
and therefore you’ll have 64 tasks sitting there waiting for their read or writes to finish,
but they can’t finish because there’s no more threads left to do them on.
If you reduce your loop down to 64, or make your queue a serial queue in order to bottleneck the tasks, the code will once again work. 
Although, this is a pretty contrived example. In reality, you would never have so many contested read and writes happening 
concurrently (this would be an indication of a more fundamental problem in your logic) – and even if you did, your writes should most probably 
be happening asynchronously with a dispatch_barrier_async.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实际上是一个线程池耗尽问题
sync和barrier共同造成的。&lt;/p&gt;

&lt;p&gt;loop数量为100， 线程池已满（64）。
线程池已耗尽， 然后sync提交的任务在等待 barrier提交的任务的执行完， 但是barrier提交的任务已经分配不到线程执行了，永远无法执行完。&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Jan 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/01/09/iOS-readwrite-lock/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/01/09/iOS-readwrite-lock/</guid>
        
        <category>多线程</category>
        
        <category>锁</category>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS网络请求IP直连的SNI问题</title>
        <description>&lt;h2 id=&quot;问题说明&quot;&gt;问题说明&lt;/h2&gt;

&lt;p&gt;在iOS开发中，当我们请求server的API时，假定server地址是baidu1.com.
Https的连接过程中， server会返回baidu1.com的公钥证书，我们可以通过公钥证书验证server是否是我们要访问的baidu1.com。&lt;/p&gt;

&lt;p&gt;但是，如果server支持SNI， 那么server可以对应多个域名，比如baidu1，baidu2, baidu3…&lt;/p&gt;

&lt;p&gt;正常情况下， 我们访问baidu1.com， server知道我们要访问的是baidu1.com，会返回baidu1.com的公钥证书。
但是如果是IP直连，server无法知道我们访问它对应的哪一个域名， 可能返回返回baidu2.com，baidu3.com…的证书.&lt;/p&gt;

&lt;p&gt;那么，IP直连时，我们可以指定域名让server知道么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不太行&lt;/strong&gt;. iOS上层网络库NSURLConnection/NSURLSession没有提供接口进行SNI字段的配置，因此需要Socket层级的底层网络库例如CFNetwork，来实现IP直连网络请求适配方案。
吐槽一句， Android的OKHttp很方便支持……&lt;/p&gt;

&lt;h2 id=&quot;常见解决方案&quot;&gt;常见解决方案&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;CFNetwork&lt;/li&gt;
  &lt;li&gt;curl&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CFNetwork是一个iOS的底层库，这里有一个kCFStreamPropertySSLSettings进行设置握手的host，这样在握手的时候就有host了&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 建立inputstream，并注入ssl相关信息&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CFReadStreamRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFReadStreamCreateForHTTPRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCFAllocatorDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfrequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__bridge_transfer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSInputStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 配置SNI字段 stream.property[kCFStreamPropertySSLSettings][kCFStreamSSLPeerName] = originalHost&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allHTTPHeaderFields&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectForKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 可以选择使用SSL或者TLS1.2，目前CFNetwork不支持HTTP2.0.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__bridge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kCFStreamSocketSecurityLevelTLSv1_2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__bridge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCFStreamPropertySocketSecurityLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sslProperties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initWithObjectsAndKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__bridge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCFStreamSSLPeerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sslProperties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__bridge_transfer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCFStreamPropertySSLSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;curl这个大家比较熟悉了， c级别的网络底层库，mac和linux系统都自带这个库； iOS有比较旧的第三方库，不推荐使用。&lt;/p&gt;

&lt;p&gt;阿里和字节都提供HttpDNS服务， 他们也都提到了这两个方案。&lt;/p&gt;

&lt;p&gt;阿里给出的方案说明仅有相关文章， 文章的主要内容来自&lt;a href=&quot;https://github.com/ChenYilong/iOSBlog/issues/13，&quot;&gt;https://github.com/ChenYilong/iOSBlog/issues/13，&lt;/a&gt; 该文章比较旧了，这位有名的业界大佬也早已移民。
字节给出了CFNetwork实现的代码，&lt;a href=&quot;https://www.volcengine.com/docs/6758/174385&quot;&gt;地址&lt;/a&gt;, 但是建议商用上架之前还是好好掂量一番。&lt;/p&gt;

&lt;h2 id=&quot;其他解决方案workaround&quot;&gt;其他解决方案(Workaround)&lt;/h2&gt;

&lt;p&gt;根据问题的原因说明，我们可以想到两个直接方案：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不验证server返回的公钥证书&lt;/li&gt;
  &lt;li&gt;验证server可能返回的所有公钥证书&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;先别笑，这两个方案看似无脑粗暴，理论上讲却釜底抽薪， 是可行的。&lt;/p&gt;

&lt;h3 id=&quot;不验证server返回的公钥证书&quot;&gt;不验证server返回的公钥证书&lt;/h3&gt;

&lt;p&gt;方案1验证不了server的身份， 可能会有中间人攻击。不过，安全通常是取舍。
如果接口对安全要求没那么高， IP直连就是为了解决DNS问题，是完全可以考虑的。
很多小公司本身在网络实现上就没有实现公钥验证，没有实现AFNetworking或Alamofire的 SSL pinning功能。&lt;/p&gt;

&lt;p&gt;直接在didReceive challenge: URLAuthenticationChallenge收到证书挑战的方法中返回信任证书&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URLSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonnull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSURLSessionTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didReceiveChallenge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonnull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSURLAuthenticationChallenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonnull&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeDisposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nullable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSParameterAssert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSParameterAssert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSParameterAssert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSParameterAssert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSThread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeDisposition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengePerformDefaultHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 收到证书挑战，先判断需要认证的方法是不是需要认证服务器证书&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationMethod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLAuthenticationMethodServerTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 返回该证书，信任这个证书&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengeUseCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;credential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLCredential&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentialForTrust&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectionSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverTrust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSURLSessionAuthChallengePerformDefaultHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;最新补充&lt;/strong&gt; 注意! iOS17更新：iOS17加强了安全，使用上面的信任之后，依然报ssl错误，错误码为-1200； 需要在info.plist中添加Allow Arbitrary Loads并置为YES，表示支持任意请求。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;验证server可能返回的所有公钥证书&quot;&gt;验证server可能返回的所有公钥证书&lt;/h3&gt;

&lt;p&gt;这个是我们曾经用过的方案。&lt;/p&gt;

&lt;p&gt;先回顾一下历史， 国内最早提供HttpDNS服务的是阿里还有鹅厂， 当时不是SDK，只是提供一个url， 发送请求返回host对应的IP， 然后用IP直连请求。
IP的缓存需要自己处理，当时用的是HappyDNS，七牛提供的一个第三方DNS相关的库， 最近看了下， HappyDNS已经超过10年了，还在更新！&lt;/p&gt;

&lt;p&gt;我们通过NSURLProtocl实现IP直连的时候比较早，开始是NSURLConnection，后面才更新到NSURLSession，当时资料很少， 阿里没有提供SDK，所以&lt;a href=&quot;https://github.com/ChenYilong&quot;&gt;ChenYilong&lt;/a&gt;还没有写那篇文章。&lt;/p&gt;

&lt;p&gt;这里在回顾下SNI的概念：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;SNI（Server Name Indication）是为了解决一个服务器使用多个域名和证书的SSL/TLS扩展。它的工作原理如下：
在连接到服务器建立SSL链接之前先发送要访问站点的域名（Hostname）。
服务器根据这个域名返回一个合适的证书。
目前，大多数操作系统和浏览器都已经很好地支持SNI扩展。
上述过程中，当客户端使用“IP直连”时，请求URL中的host会被替换成解析出来的IP，导致服务器获取到的域名为解析后的IP，无法找到匹配的证书，只能返回默认的证书或者不返回，所以会出现SSL/TLS握手不成功的错误。
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当时不能无脑信任证书，我们的server虽然支持SNI，但是对应的域名只有两个。 我们理所当然的想到， 将sever返回的公钥证书和这两个同时匹配，有一个通过，就可以认为server身份验证通过。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;： server默认返回的是预期域名中的一个。
这一点可能需要和server的童鞋沟通一下。 类似图片地址之类的，使用了CDN服务的请求可能不能这样处理。&lt;/p&gt;

&lt;p&gt;对应App中一般的API请求，这个方案当时是可行的，是可以正常运作的； 也许有我不知道的SNI相关的盲区，知道的童鞋麻烦提点一下，谢谢。
从结果上看，这个方案是运行良好的。 最近拿现在公司的server试了下，也是OK的。&lt;/p&gt;

&lt;p&gt;不过在实施这个方案前，最后和server认真的对一下，最好有容错机制。 毕竟过去太久，这个方案的很多细节已不记得了。&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;iOS14以后，可以考虑加密DNS， 而不使用HttpDNS做IP直连的方案。&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Aug 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/08/11/iOS%E5%BC%80%E5%8F%91-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82IP%E7%9B%B4%E8%BF%9ESNI%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/08/11/iOS%E5%BC%80%E5%8F%91-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82IP%E7%9B%B4%E8%BF%9ESNI%E9%97%AE%E9%A2%98/</guid>
        
        <category>网络</category>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开发连不上服务器问题</title>
        <description>&lt;h2 id=&quot;问题概述&quot;&gt;问题概述&lt;/h2&gt;

&lt;p&gt;用户的问题表现是： 连不上服务器。&lt;/p&gt;

&lt;p&gt;为了方便说明， 将网络请求类比为打有线电话给一座大楼中的某个座机。&lt;/p&gt;

&lt;p&gt;网络请求域名比如”google.com” -&amp;gt;  DNS解析  -&amp;gt;  和目标服务器IP开始通信&lt;/p&gt;

&lt;p&gt;请求拨打号码  -&amp;gt;  到达大楼的总机，帮我们转对应座机 -&amp;gt;  和座机对话&lt;/p&gt;

&lt;p&gt;这3步过程中，可能出现的问题&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;网络断了 （电话线断了）&lt;/li&gt;
  &lt;li&gt;DNS解析失败，没有找到服务器  （总机转座机，找不到座机）&lt;/li&gt;
  &lt;li&gt;找到了错的服务器（总机转到了错的座机）&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;从原理上讲，问题只会出现在这三步, 也就是问题只可能是这几种&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;针对上述问题，APP端可以实施的方案说明如下。&lt;/p&gt;

&lt;h3 id=&quot;网络断开&quot;&gt;网络断开&lt;/h3&gt;

&lt;p&gt;正确的提示即可;
网络问题的错误码是系统错误，&lt;a href=&quot;https://developer.apple.com/documentation/foundation/1508628-url_loading_system_error_codes&quot;&gt;URL Loading System error codes&lt;/a&gt;; 
注意和HTTP response status codes以及后台定义的业务错误error code，这三种要区分开。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意： 考虑用户首次进入，没有给网络权限的情况； 比如第三方库的初始化，或者初始配置的获取，在首次获取网络权限后再处理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;没找到目标服务器dns解析失败&quot;&gt;没找到目标服务器（DNS解析失败）&lt;/h3&gt;

&lt;p&gt;通常是因为手机本地的DNS解析有问题， 可能是DNS劫持或污染， 导致本地DNS出问题。&lt;/p&gt;

&lt;p&gt;常见的解决方案：&lt;/p&gt;

&lt;p&gt;指导用户修改本地DNS（类似在网络设置中配置114的DNS地址）来缓解该问题，不一定有效，且需要用户操作。&lt;/p&gt;

&lt;h4 id=&quot;httpdns方案&quot;&gt;HttpDNS方案&lt;/h4&gt;

&lt;p&gt;HttpDNS是之前普遍的做法，使用HttpDNS这样的第三方服务直接获取到IP，然后用IP直接请求。 不经过本地DNS来解析获取IP。
目前各大平台推荐的实现方式是使用NSURLProtol拦截请求， 然后修改请求的地址为HttpDNS处理过后的IP地址。
缺点：
NSURLProtol本身实现比较繁琐，多线程问题， 另外还有请求重定向，以及iOS 上的老大难的 SNI 问题。&lt;/p&gt;

&lt;h4 id=&quot;加密dns方案&quot;&gt;加密DNS方案&lt;/h4&gt;

&lt;p&gt;iOS14以后， iOS支持加密DNS。
传统的DNS是UDP连接， 明文传输，安全难有保障。
现在各大厂商陆续提供加密DNS的服务， iOS这边指定一个加密DNS的服务地址（第三方提供），
可以让App内的DNS解析全部走第三方的加密DNS服务器，而不是本地DNS。
这样也类似实现了上面HttpDNS的功能。
缺点是： DSN解析速度会有一定的影响（百毫秒级别），免费的加密DNS服务不保证绝对可用，且有一定的流量限制。&lt;/p&gt;

&lt;p&gt;目前个人推荐使用加密DNS方案。&lt;/p&gt;

&lt;h3 id=&quot;找到了错的服务器&quot;&gt;找到了错的服务器&lt;/h3&gt;

&lt;p&gt;其实就是中间人攻击，中间人冒充我们的服务器和我们通信。Charles的实现就是该原理。
错的服务器可能不响应我们的请求， 也可能返回错误的无法处理的response。&lt;/p&gt;

&lt;p&gt;解决方案: 公钥验证&lt;/p&gt;

&lt;p&gt;我们可以验证服务器的身份。 Https的请求建立后， 服务器会返回公钥证书， 可以通过验证这个公钥证书来验证服务器的身份。&lt;/p&gt;

&lt;p&gt;发送HTTPS请求首先要进行SSL/TLS握手，握手过程大致如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户端发起握手请求，携带随机数、支持算法列表等参数。&lt;/li&gt;
  &lt;li&gt;服务端收到请求，选择合适的算法，下发公钥证书和随机数。&lt;/li&gt;
  &lt;li&gt;客户端对服务端证书进行校验，并发送随机数信息，该信息使用公钥加密。&lt;/li&gt;
  &lt;li&gt;服务端通过私钥获取随机数信息。&lt;/li&gt;
  &lt;li&gt;双方根据以上交互的信息生成session ticket，用作该连接后续数据传输的加密密钥。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;公钥验证在第3步。&lt;/p&gt;

&lt;p&gt;目前网络请求库都支持公钥验证，即是所谓的Public Key Pinning。&lt;/p&gt;

&lt;p&gt;我们在App中内置公钥证书， 通过内置的公钥证书的公钥内容对比server返回的公钥，即可验证server的身份。&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Jul 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/07/11/iOS%E5%BC%80%E5%8F%91-%E8%BF%9E%E4%B8%8D%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/11/iOS%E5%BC%80%E5%8F%91-%E8%BF%9E%E4%B8%8D%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%AE%E9%A2%98/</guid>
        
        <category>网络</category>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>Git 工作流程</title>
        <description>&lt;p&gt;Git flow/ workflow；&lt;br /&gt;
Git 工作流程是团队在使用 Git 进行版本控制时商定的一个统一工作流程。&lt;br /&gt;
这个工作流程可以自定义，也可以使用已经定义好的流程，最重要的是适合你的项目。&lt;/p&gt;

&lt;p&gt;这个流程主要是针对分支管理策略。&lt;/p&gt;

&lt;p&gt;常见的 Git 工作流程有三种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Git flow&lt;/li&gt;
  &lt;li&gt;GitHub flow&lt;/li&gt;
  &lt;li&gt;GitLab flow&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-flow&quot;&gt;Git flow&lt;/h2&gt;

&lt;p&gt;最传统的 Git 工作流程。&lt;br /&gt;
Git flow 通常包含五种类型的分支：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Master 分支&lt;/strong&gt;：主干分支，也是正式发布版本的分支，包含可以部署到生产环境中的代码。通常情况下，只允许其他分支将代码合入，不允许直接向 Master 分支提交代码（对应生产环境）。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Develop 分支&lt;/strong&gt;：开发分支，用来集成测试最新合入的开发成果，包含要发布到下一个 Release 的代码（对应开发环境）。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Feature 分支&lt;/strong&gt;：特性分支，通常从 Develop 分支拉出，每个新特性的开发对应一个特性分支，用于开发人员提交代码并进行自测。自测完成后，会将 Feature 分支的代码合并至 Develop 分支，进入下一个 Release。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Release 分支&lt;/strong&gt;：发布分支，发布新版本时基于 Develop 分支创建，发布完成后合并到 Master 和 Develop 分支（对应集成测试环境）。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hotfix 分支&lt;/strong&gt;：热修复分支，生产环境发现新 Bug 时创建的临时分支，问题验证通过后，合并到 Master 和 Develop 分支。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://bbs-img.huaweicloud.com/blogs/img/image1(11).png&quot; alt=&quot;Git Flow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;github-flow&quot;&gt;GitHub flow&lt;/h2&gt;

&lt;p&gt;代码托管到 GitHub 时默认使用的工作流程，比较简洁。只有 Master 分支固定。&lt;br /&gt;
开发功能时，从 Master 分支拉出 Feature 分支，开发完成后提交 PR，合入 Master 分支。&lt;br /&gt;
发布时，比如发布 1.0.0 版本，直接从 Master 分支创建 v1.0.0 版本并打标签。&lt;/p&gt;

&lt;p&gt;这个合入最好是快进合并（fast-forward），即合并本身并不产生一个 commit，因为一个 Feature 分支一般只做一件事，通常只有一个 commit。&lt;br /&gt;
关于这个，Linus Torvalds 特地吐槽过，简单讲他认为：GitHub 这种合并如果要生成一个 commit 的话，是多此一举。&lt;/p&gt;

&lt;h2 id=&quot;gitlab-flow&quot;&gt;GitLab flow&lt;/h2&gt;

&lt;p&gt;GitLab 推荐使用的工作流。&lt;/p&gt;

&lt;p&gt;相比于 GitHub flow，GitLab flow 增加了对预生产环境和生产环境的管理；规定 Master 分支是 Pre-Production 分支的上游，Pre-Production 是 Production 分支的上游；GitLab flow 规定代码必须从上游向下游发展；即新功能或修复 Bug 时，特性分支的代码测试后必须先合入 Master 分支，然后才能由 Master 分支向 Pre-Production 环境合入，最后由 Pre-Production 合入到 Production。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bbs-img.huaweicloud.com/blogs/img/image7(7).png&quot; alt=&quot;GitLab Flow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;工作流优缺点分析&quot;&gt;工作流优缺点分析&lt;/h2&gt;

&lt;p&gt;个人认为，对工作流的要求有以下几点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;简单&lt;/li&gt;
  &lt;li&gt;提交记录清晰，最好保持一条直线&lt;/li&gt;
  &lt;li&gt;能满足基本需求：Feature 分支通过 MR/PR 合入，Release 发布，Hotfix 发布&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Git flow 最大的问题是分支较复杂，而且分支的历史不是一条直线，合并频繁。&lt;/p&gt;

&lt;p&gt;GitHub flow 和 GitLab flow 的差距不大，都比 Git flow 简单。&lt;br /&gt;
建议从 GitHub flow 或 GitLab flow 中选一种，一般只需要简单调整即可满足团队需求。&lt;/p&gt;

&lt;h2 id=&quot;推荐工作流&quot;&gt;推荐工作流&lt;/h2&gt;

&lt;p&gt;目前使用的工作流类似 GitHub flow，讲解一下细节：&lt;/p&gt;

&lt;h3 id=&quot;feature-开发&quot;&gt;Feature 开发&lt;/h3&gt;

&lt;p&gt;主开发分支为 Master。&lt;/p&gt;

&lt;p&gt;开发任何功能或修改，开 Feature 分支，开发完成后提交 PR。&lt;br /&gt;
PR 的合并一定是快进合并（fast forward）的，不允许合并本身产生 commit 节点。&lt;br /&gt;
即要求如果 Feature 分支和 Master 有冲突，rebase Master 分支。&lt;/p&gt;

&lt;p&gt;一般一个 Feature 分支只有一次 commit，多余的 commit 可以 squash。&lt;/p&gt;

&lt;p&gt;有些平台支持 commit squash 和自动 rebase，以及合并必须是快进合并，注意配置。&lt;/p&gt;

&lt;h3 id=&quot;release-发布&quot;&gt;Release 发布&lt;/h3&gt;

&lt;p&gt;比如 1.0 版本，1.0 版本的 Feature 全部合入后，开新的 release 1.0 分支。&lt;/p&gt;

&lt;p&gt;如果 release 1.0 分支存在后，Master 上有了新的两次提交 A 和 B，B 需要在 1.0 发布。&lt;br /&gt;
那么 cherry-pick B 到 release 1.0 分支。release 1.0 发布后必须打标签，然后删除 release 1.0 分支。&lt;/p&gt;

&lt;h3 id=&quot;hotfix-发布&quot;&gt;Hotfix 发布&lt;/h3&gt;

&lt;p&gt;如果上面的 1.0 发布后，过了一段时间需要发修复版本，从 release 1.0 的标签开修复版本发布分支：release 1.1 分支。&lt;br /&gt;
可以从 release 1.1 上开分支 hotfixFeature，开发完成后合入 release 1.1 分支，并 cherry-pick 到 Master 分支。&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;简单的分支策略就这些，其中需要注意测试。&lt;br /&gt;
测试以 Master 分支为主测试分支，然后是准备发布的 release 分支。&lt;br /&gt;
另外可以使用 git-flow 工具做一些配置，这里不再赘述。&lt;/p&gt;

&lt;p&gt;这个适合生产环境比较单一的场景。&lt;br /&gt;
优点是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;简单的分支关系：Master 主分支、功能分支、临时的 release 版本分支。&lt;/li&gt;
  &lt;li&gt;提交记录是一条直线，方便阅读和追溯。&lt;/li&gt;
  &lt;li&gt;一切皆有记录，每个版本都有标签，每个版本发布了什么、何时发布，简单明了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不过还是那句话，工作流程是根据团队和场景决定的，没有最好的，只有最适合的。&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/19/git-workflow/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/19/git-workflow/</guid>
        
        <category>Git</category>
        
        
      </item>
    
      <item>
        <title>压缩图片和视频资源处理</title>
        <description>&lt;h2 id=&quot;压缩图片&quot;&gt;压缩图片&lt;/h2&gt;

&lt;p&gt;图片压缩使用&lt;a href=&quot;https://tinypng.com/cn/?ref=www.codernav.cn&quot;&gt;TinyPNG&lt;/a&gt;，
可以下载对应的命令行工具&lt;a href=&quot;https://www.npmjs.com/package/tinypng-cli&quot;&gt;tinypng-cli&lt;/a&gt;, 然后取官网申请一个key，一个月500次免费使用次数。
TinyPNG对web前端的童鞋再熟悉不过了，详细使用请参考官网。&lt;/p&gt;

&lt;p&gt;以前我们想找到工程中所有的大图（比如&amp;gt;100k）的图片，然后压缩之，都是用脚本,类似下面：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Const_Image_Format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;jpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pdf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rootDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Users/You/Documents/Images.xcassets&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;limit_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;limit_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;limit_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileFilt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FilterFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filenames&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;       
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenames&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fileDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDir&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Const_Image_Format&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;filesize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filesize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileFilt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FilterFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;execute finished.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;后来发现有一个更简单的方法， find命令+tinyPNG-cli&lt;/p&gt;

&lt;p&gt;查找某个目录下所有大于100k的文件&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;find /path/to/directory -type f -size +100k
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查找某个目录下所有大于100k的图片文件并压缩&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;find /path/to/directory -type f -size +100k -print -exec tinypng -k key {} \;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查找资源目录下所有大于50k且小于100k 的 格式为 png或jpg的图片，  并压缩它们&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;find /path/to/directory -type f \( -name &apos;*.png&apos; -o -name &apos;*.jpg&apos; \) -size +50k -size -100k -print -exec tinypng -k key {} \;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;key替换成你你申请的tinyPNG 的key， /path/to/directory 替换成你的资源文件路径&lt;/p&gt;

&lt;h2 id=&quot;压缩视频&quot;&gt;压缩视频&lt;/h2&gt;

&lt;p&gt;图片压缩使用&lt;a href=&quot;https://ffmpeg.org//&quot;&gt;ffmpeg&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;影响视频大小的因素&quot;&gt;影响视频大小的因素&lt;/h3&gt;

&lt;p&gt;一般下面6个因素影响视频大小：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;视频格式format：mp4、mov、flv、avi、hls等&lt;/li&gt;
  &lt;li&gt;像素格式：pix_fmt 比如 yuv420p&lt;/li&gt;
  &lt;li&gt;视频编码格式codec：codec_name 如H264、H265、vp8、vp8、av1&lt;/li&gt;
  &lt;li&gt;宽、高、时长：width、height、duration&lt;/li&gt;
  &lt;li&gt;码率：bitrate= size*8/duration&lt;/li&gt;
  &lt;li&gt;帧率：fps&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;压缩选项&quot;&gt;压缩选项&lt;/h3&gt;

&lt;p&gt;压缩视频大小， 一般修改2-4项，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;手机播放端一般不需要这么高分辨率，降低720p；&lt;/li&gt;
  &lt;li&gt;帧率30fps即可，可以降低到24左右；&lt;/li&gt;
  &lt;li&gt;码率压缩，选用-crf固定码率比压缩;&lt;/li&gt;
  &lt;li&gt;视频编码h264(main)可以调整到h264(high);&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上4个参数配置压缩命令如下：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;ffmpeg -y -i xx.mp4 -c:a copy  -c:v libx264 -profile:v high -r 30 -crf 22 -s 720x1080  xx-out.mp4
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;简单介绍参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-y:表示输出文件覆盖&lt;/li&gt;
  &lt;li&gt;-i:表示输入文件&lt;/li&gt;
  &lt;li&gt;-c:a:表示音频部分编码，copy表示直接复制到新文件&lt;/li&gt;
  &lt;li&gt;-c:v:表示视频部分编码，libx264表示使用h264编码&lt;/li&gt;
  &lt;li&gt;-profile:v:h264编码参数，使用更紧凑的压缩算法&lt;/li&gt;
  &lt;li&gt;-r:表示视频帧率，30fps&lt;/li&gt;
  &lt;li&gt;-crf:表示码率应用固定码率比，从0～500，越大码率越低，一般18～32效果较好&lt;/li&gt;
  &lt;li&gt;-s:视频分辨率裁剪，720x1080表示裁剪成720p&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你可以只修改部分参数，比如修改crf，不改变其他，效果也是立竿见影&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;ffmpeg -i input.mp4 -vcodec libx264 -crf 20 output.mp4
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;转换成hlsm3u8&quot;&gt;转换成HLS(m3u8)&lt;/h3&gt;

&lt;p&gt;在压缩完视频后， 如果是线上播放，可以考虑改为HTTP Live Streaming(m3u8)格式，减少缓冲时间：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;ffmpeg -i input.mp4 -codec: copy -vbsf h264_mp4toannexb -start_number 0 -hls_time 10 -hls_list_size 0 -f hls output.m3u8
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;-hls_time n: 设置每片的长度，默认值为2。单位为秒&lt;/li&gt;
  &lt;li&gt;-hls_list_size n:设置播放列表保存的最多条目，设置为0会保存有所片信息，默认值为5&lt;/li&gt;
  &lt;li&gt;-hls_start_number n:设置播放列表中sequence number的值为number，默认值为0&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 03 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/03/assets-compress/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/03/assets-compress/</guid>
        
        <category>工具</category>
        
        <category>App开发</category>
        
        
      </item>
    
      <item>
        <title>App开发工程化</title>
        <description>&lt;p&gt;App开发工程化，主要是以下几个方面：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;规范化（Format，Lint，Sonarcube）&lt;/li&gt;
  &lt;li&gt;自动化（CI和CD）&lt;/li&gt;
  &lt;li&gt;组件化（内部库）&lt;/li&gt;
  &lt;li&gt;版本控制（Git Flow）&lt;/li&gt;
  &lt;li&gt;测试（单元测试，UI测试）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;规范化formatlintsonarqube&quot;&gt;规范化（Format，Lint，SonarQube）&lt;/h2&gt;

&lt;p&gt;简单讲就是代码的规范化；
代码格式化（Format）和代码规范检查（Lint），一般你不是用Xcode就不用特别在意，因为其他平台的开发工具都自带Format和Lint，或者提供插件。
可是Xcode，连format都不给！&lt;/p&gt;

&lt;p&gt;你需要安装&lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat&quot;&gt;SwiftFormat&lt;/a&gt;，&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt;，然后在工程里做配置脚本。&lt;/p&gt;

&lt;p&gt;个人的SwiftFormat 配置&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;if [ &quot;${CONFIGURATION}&quot; = &quot;Debug&quot; ]; then

&quot;${PODS_ROOT}/SwiftFormat/CommandLineTool/swiftformat&quot; --disable unusedArguments,initCoderUnavailable,andOperator,trailingClosures,redundantReturn --nospaceoperators &quot;...,..&amp;lt;&quot; --swiftversion &quot;5.0&quot; &quot;${SRCROOT}/Project/&quot;

echo &quot;format debug build swift code&quot;

else

echo &quot;Not Debug Env, skip format&quot;

fi
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;个人的&lt;a href=&quot;https://gist.github.com/DamonFish/df081b716551cc2c2377ea3a186d1ecd&quot;&gt;SwiftLint&lt;/a&gt;配置&lt;/p&gt;

&lt;p&gt;部分代码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;disabled_rules:
  - unused_closure_parameter
  - trailing_comma 
  - force_cast
  - opening_brace
  - large_tuple
  - inclusive_language
#  - trailing_whitespace
#  - todo
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也可以借助SonarQube这一类的第三方静态分析工具，critical的issue务必解决。&lt;/p&gt;

&lt;h2 id=&quot;自动化ci和cd&quot;&gt;自动化（CI和CD）&lt;/h2&gt;

&lt;p&gt;个人常用的自动化平台是CircleCI和Jenkins。
Jenkins是免费的，免费工具的最大优点通常就是免费。 很多插件已经比较古老了。 比如自搭server的Gitlab， MRrequest检测插件很久都没人更新，最好还是按照热心网友在github提的一个pr，然后自己按照pr内容从新编译了一个新的插件。
如果有更好的选择，不推荐使用。&lt;/p&gt;

&lt;p&gt;CircleCI也很老牌了， 和Bitbucket全家桶在国外算是标配了。
功能强大，文档全。&lt;/p&gt;

&lt;p&gt;个人用的config配置，仅作参考
&lt;a href=&quot;https://gist.github.com/DamonFish/5fada002fa6dd045822ccb69e496f044&quot;&gt;Config&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当然，在App端，自动化平台都依赖Fastlane，没有ta， 寸步难行啊。
其实App端的自动化就是：
Fastlane + CI/CD工具。&lt;/p&gt;

&lt;p&gt;当然大厂可能会用自己的平台和工具。&lt;/p&gt;

&lt;h2 id=&quot;组件化内部库&quot;&gt;组件化（内部库）&lt;/h2&gt;

&lt;p&gt;就是模块化后，将基础模块封装成库，提供给多个工程或者多个团队使用。&lt;/p&gt;

&lt;p&gt;iOS常用的方式就是利用cocoapod做私用库，需要私用库spec仓库。 或者指定tag。
总之，利用cocoapod来加载这些库。&lt;/p&gt;

&lt;p&gt;可以组件化的库一般分两种：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;基础设施库， 例如： 网络功能，日志，路由， debug模块，数据库模块， 文件操作等&lt;/li&gt;
  &lt;li&gt;基础功能库， 例如： 网络请求模块（带基础业务功能）， 登陆模块， 账号管理模块， 会员内购模块， 分享功能等&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里需要指出的是，写代码给自己用和给一群人用，完全是两个概念。
给一群人用其实是写SDK，SDK用户的需求多变，场景复杂， 版本兼容。 稳定性，兼容性， 扩展性，都是另一个级别。 
到时候，你能更深刻的了解KISS原则，代码设计六大原则。
这里不展开讨论了。&lt;/p&gt;

&lt;h2 id=&quot;版本控制&quot;&gt;版本控制&lt;/h2&gt;

&lt;p&gt;关于git工作流会在另一篇文章中单独讲。&lt;/p&gt;

&lt;p&gt;这里说几个注意点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;团队的git水平应该达到工作流程需要的水平之上；
讲个极端例子，如果团队都是用SVN的，那就谨慎考虑git，先培训分享吧。&lt;/li&gt;
  &lt;li&gt;权限控制，
仍然是极端例子： 我第一次丝滑的删除了Bitbucket上的项目时， 意识到了这一点； 相比之下Github好很多。
权限必须要控制，实习生真删库跑路了，可怪不了他们。&lt;/li&gt;
  &lt;li&gt;流程开始不要追求完美， 流程的制定是结合实际情况的，该调整得调整&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;测试单元测试ui测试集成测试&quot;&gt;测试（单元测试，UI测试，集成测试）&lt;/h2&gt;

&lt;p&gt;先抛却技术层面，应该严肃对待测试的重要性。这个也说给我自己听。
尊重QA人员， 应该互相尊重，都是打工人。 开发和测试，应该是相辅相成的关系。&lt;/p&gt;

&lt;p&gt;技术层面上讲， TDD的思想能反过来让开发从另一个角度考虑代码结构和质量。 
曾经在客户端，特别是iOS， 单元测试是很鸡肋的东西，官方的支持很少。
但是这个时代已经彻底过去了， 应该跟上时代了。 官方的测试框架已经比较好用了；&lt;/p&gt;

&lt;p&gt;目前我对测试的看法是， 
工具类， 数据相关， 单元测试是很必要的。
UI测试是实用性不佳，另外国内对Accessibility的支持比较少；所以目前不是很必要。&lt;/p&gt;

&lt;p&gt;另外经验上讲：
每次发布版本，要考虑几个步骤必须测试&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;新账号的注册和使用，被坑过几次了&lt;/li&gt;
  &lt;li&gt;大规模的修改，要通知测试配合，最好一蹴而就，不要牵连多个版本。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;个人经验其他&quot;&gt;个人经验，其他&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;工程目录和模版，层次不要太深
建议工程目录按照功能模块分， 功能模块文件夹下放mvc/mvvm文件夹， 目录不要太深。 公用的放外层公用文件夹。 其他没有强制要求。&lt;/li&gt;
  &lt;li&gt;第三方库的维护
版本使用稳定版本；
第三方库发布最新版本后，至少经过两周后再升级； 这个让我们避免很多次被坑，第三方库的稳定性无法保证的，经过一段时间验证后再使用。
定期更新，避免差距在大版本号之上，版本差距最好不要超过两个小版本号；
注意查看第三方库的release notes和issues列表；&lt;/li&gt;
  &lt;li&gt;添加或者修改底层重要的框架或库，需要通知其他开发人员，最好大家一起评估必要性和影响。 如果修改和替换需要花较长时间，认真评估和排期，尽快的全部修改掉， 避免新旧实现共存太久。&lt;/li&gt;
  &lt;li&gt;提PR前，可以先跟自己讲一个遍， 我称之为费曼提PR法。&lt;/li&gt;
  &lt;li&gt;前期避免过早不必要的优化。&lt;/li&gt;
  &lt;li&gt;提倡使用新技术， 新技术的采用者请务必调研清楚， 说明必要性； 决定采用后，请让整个团队在新技术的能力在某一个水平之上，最好有最佳实践手册。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 06 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/06/app-project-development/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/06/app-project-development/</guid>
        
        <category>App开发</category>
        
        <category>工程管理</category>
        
        
      </item>
    
      <item>
        <title>weak-strong dance需注意的点</title>
        <description>&lt;h2 id=&quot;概念&quot;&gt;概念&lt;/h2&gt;

&lt;p&gt;weak-strong dance用于处理闭包导致的循环引用。
比如self持有了block，block同时持有了self，相互引用，无法释放造成内存泄漏。&lt;/p&gt;

&lt;p&gt;关于循环引用,这里主要讲在实际使用中需要注意的几点。&lt;/p&gt;

&lt;h2 id=&quot;不是所有block里的self都需要weak&quot;&gt;不是所有block里的self都需要weak&lt;/h2&gt;

&lt;p&gt;一般只有产生循环引用的场景，需要weak-strong dance。
下面的三种场景是不会产生循环引用的.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;如果block是非逃逸的，block不会持有self， 比如map，filter，reduce等block操作。这种block是立即执行的代码块，无需强持有self等到“后续”使用；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;block是逃逸的，但是self不持有block，不需要。 例如系统相关方法的block， GCD的block或者UIView的动画block；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;单例持有block，block持有self， 这种情况后续单独说；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;单例和-weak-strong-dance&quot;&gt;单例和 weak-strong dance&lt;/h2&gt;

&lt;p&gt;self事实上并不真的持有单例， self并不对单例负责。
内存管理基本原则： 谁开辟，谁释放。 谁开辟，谁管理。
block是单例开辟的，应该由单例管理并释放，与self无关。&lt;/p&gt;

&lt;p&gt;下面的例子即使self不持有block，但仍需要对self 进行weak-strong dance，不然会内存泄漏，
     代码来自比较老的版本的极验登录。
self持有单例（隐式）， 单例持有block， block持有self， 形成了循环引用。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 一键登录进入授权页面&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;OneLoginManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;requestToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同样是单例，SDWebImageManager 就不需要 weak-strong dance&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDWebImageManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadImageWithURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDWebImageRetryFailed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDWebImageAvoidDecodeImage&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;progress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDImageCacheType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;AFNetwoking中的我们一般封装一个请求的单例继承自AFHTTPSessionManager，请求的回调block中也不需要 weak-strong dance。&lt;/p&gt;

&lt;p&gt;所以一键登录例子中的Manager应该管理block的释放，不应需要 weak-strong dance的，其写法有缺陷。&lt;/p&gt;

&lt;p&gt;如果你去查看其他无需 weak-strong dance的源码，你会发现清除block的代码，类似：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;LOTAnimationCompletionBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;自己开辟的block自己释放。&lt;/p&gt;

&lt;h2 id=&quot;weak-strong-dance-来加快self释放&quot;&gt;weak-strong dance 来加快self释放&lt;/h2&gt;

&lt;p&gt;前面讲到了， 非self持有的block， 没有循环引用，一般无需对self进行weak-strong dance。
但是下面一个场景：
进入到某viewController后，请求了一个接口。然后迅速退出了该viewController。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 没有使用weak-strong dance，退出viewController后， self会等到请求回调block执行后才会释放。&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ResourceManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;downloadError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 做一些繁重的任务&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomeCompletethings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;退出viewController后，因为self被block持有了， 请求和回调中繁重的任务还是继续执行， 浪费资源。
这里虽然没有循环引用，但self的释放被延后了。可借助weak-strong dance 让self尽快释放。&lt;/p&gt;

&lt;p&gt;解决方法：
不强制持有self， 从而取消请求回调的执行。&lt;/p&gt;

&lt;p&gt;网络请求发送后，实际上是无法真正cancel的，我们能cancel掉回调，cancel掉这个请求的task。
   cancel方法应在dealloc中调用， 但是这里block持有self，dealloc执行时请求回调已结束。&lt;/p&gt;

&lt;p&gt;如果是这种情况， block不应强持有self。 请求回调执行时，self已经释放，会取消请求回调的后续执行。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 没有使用weak-strong dance，退出viewController后， self会等到请求回调block执行后才会释放。&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;downloadError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// 做一些繁重的任务&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;doSomeComplicated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;添加weak-strong dance后， 会在判断self是否存在时候返回，不会执行doSomeComplicated&lt;/p&gt;

&lt;p&gt;当然，这并不完美。
比较好的方式是在合适的地方，由ResourceManager自己取消整个任务。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 在退出时或者其他合适的地方调用&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cancelFetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchCompletion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显式的取消是比较麻烦的。
如果你有兴趣了解自动取消，比如取消请求，取消观察之类的。
请参阅KVOController， 或者RXSwift（Moya）disposeBag的相关实现方式。&lt;/p&gt;

&lt;h2 id=&quot;多层嵌套的-weak-strong-dance-补充&quot;&gt;多层嵌套的 weak-strong dance （补充）&lt;/h2&gt;

&lt;p&gt;多层block嵌套的时候注意 weak-strong dance不要漏掉了&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taskOne&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
   &lt;span class=&quot;c1&quot;&gt;// 下面写了N行&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
   
   &lt;span class=&quot;c1&quot;&gt;// taskTwo的weak-strong dance 不小心漏掉了&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taskTwo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你可能觉得这不太可能， 新版本的Swift 5.8的写法， 是能省略掉self的。
看下面的写法， 漏掉weak-strong dance可能就看上去就更自然。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taskOne&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
   &lt;span class=&quot;c1&quot;&gt;// 下面写了N行&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;taskTwo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 12 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/12/weak-strong-dance/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/12/weak-strong-dance/</guid>
        
        <category>iOS开发</category>
        
        
      </item>
    
  </channel>
</rss>
